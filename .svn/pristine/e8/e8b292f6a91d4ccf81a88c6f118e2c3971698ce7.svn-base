package kr.or.ddit.controller.project;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.controller.project.service.IProjectNoticeService;
import kr.or.ddit.vo.DevinComentVO;
import kr.or.ddit.vo.DevinVO;
import kr.or.ddit.vo.ProjectNoticeVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/projectNotice")
public class ProjectNoticeController {
	
	@Inject
	private IProjectNoticeService service;
	
	/**
	 * 채진영
	 * 여기가 getMapping 이니까 url에서 proNo를 가져올 수 있는 것임! @RequestParam으로~
	 * @param proNo
	 * @return 해당 프로젝트의 전체 게시물 List 가져오기
	 * @throws Exception
	 */
	@GetMapping(value = "/projectNoticeList", produces = "application/json; chartset=utf-8")
	@ResponseBody
	public List<ProjectNoticeVO> projectNoticeList(@RequestParam(name = "proNo", required = false) String proNo) throws Exception {
		log.debug("proNo :::::{} " , proNo);
		List<ProjectNoticeVO> projectNoticeList = service.selectList(proNo);
		log.debug("projectNoticeList:proNo가지고가니?: {} ", projectNoticeList);
		
		return projectNoticeList;
	
	}
	
	/**
	 * 채진영
	 * @param projectNoticeVO
	 * @return 조회할 공지사항 게시글 번호 1개
	 * @throws Exception
	 */
	@PostMapping(value = "/select", produces = "application/json; charset=utf-8")
	@ResponseBody
	public ProjectNoticeVO ProjectNoticeSelect(@RequestBody ProjectNoticeVO projectNoticeVO) throws Exception {
	    log.debug("받은 객체(조회할 게시글 번호 1개) : {}"+ projectNoticeVO);
		
	    ProjectNoticeVO vo = service.select(projectNoticeVO.getProNoticeNo());
	    log.debug("그 게시글 한줄 받아온것 ProjectNoticeVO : {}"+ vo);
	    
	    return vo;
	    
	    
	}
	
	
	/**
	 * shift+alt+j 하면 주석 고고링
	 * 채진영 
	 * @param projectNoticeVO
	 * @return 인서트 성공 1 "OK"=>"그번호 가지고 디테일!" , 실패 0 "NG"=> "null"
	 * @throws Exception
	 */
	@PostMapping(value = "/insert", produces = "application/json; charset=utf-8")
	@ResponseBody
	public ProjectNoticeVO ProjectNoticeInsert(@RequestBody ProjectNoticeVO projectNoticeVO) throws Exception  {
		log.debug("projectNoticeVO 인서트할거 모음: {}"+projectNoticeVO);
		
		int cnt=service.insert(projectNoticeVO);
		log.debug("인서트한 cnt :"+cnt);
		log.debug("ProNoticeNo(공지사항번호) :"+projectNoticeVO.getProNoticeNo());

		if(cnt > 0) {
			ProjectNoticeVO vo = service.select(projectNoticeVO.getProNoticeNo());
			log.debug("ProjectNoticeVO: {}" + vo);
			return vo;
		}
		return null;
			
	}
	
	
	/**
	 * shift+alt+j 하면 주석 고고링
	 * 채진영 
	 * @param vo
	 * @return 업데이트 성공 1 "OK"=>"그번호 가지고 디테일!" , 실패 0 "NG"=> "null"
	 * @throws Exception
	 */
	@PostMapping(value = "/update", produces = "application/json; charset=utf-8")
	@ResponseBody
	public ProjectNoticeVO ProjectNoticeUpdate(@RequestBody ProjectNoticeVO projectNoticeVO) throws Exception	{
		log.debug("projectNoticeVO 업데이트용: {}", projectNoticeVO);
		
		int cnt=service.update(projectNoticeVO);
		log.debug("업데이트한 cnt :"+cnt);
		log.debug("업데이트용 ProNoticeNo(공지사항번호):"+projectNoticeVO.getProNoticeNo());

		if(cnt > 0) {
			ProjectNoticeVO vo = service.select(projectNoticeVO.getProNoticeNo());
			log.debug("ProjectNoticeVO 업데이트용 내용 전체 devInVO: {}", vo);
			return vo;
		}
		
		return null;
	}
	
	/**
	 * 채진영
	 * @param vo
	 * @return 데브인 삭제
	 */
	@PostMapping(value = "/delete", produces = "application/json; charset=utf-8")
	@ResponseBody
	public String ProjectNoticeDelete(@RequestBody ProjectNoticeVO projectNoticeVO) throws Exception {
		log.debug("삭제할 객체 : {}", projectNoticeVO);
		service.delete(projectNoticeVO);
		
		return "삭제 성공";
	}
	
	
}
