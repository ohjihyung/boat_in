
package kr.or.ddit.controller.upload;

import java.io.File;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.io.FileUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.google.gson.JsonElement;
import com.google.gson.JsonParser;

import kr.or.ddit.controller.topwork.service.ITopWorkService;
import kr.or.ddit.vo.FileLocationVO;
import kr.or.ddit.vo.FileTreeVO;
import kr.or.ddit.vo.FileVO;
import kr.or.ddit.vo.TopWorkVO;
import lombok.extern.slf4j.Slf4j;

@Controller
@Slf4j
public class UploadController {

	@Autowired
	IFileTreeService fileTreeService;
	@Autowired
	IUploadService uploadservice;
	@Autowired
	ITopWorkService topworkservice;

	@PostMapping(value = "/topworkUpdate_O", produces = "text/plain;charset=UTF-8")
	@ResponseBody
	public String topworkUpdate_O(@RequestBody Map<String, String> data, HttpServletRequest req) {
		String path = req.getSession().getServletContext().getRealPath("resources/upload/");
//	   log.debug("topworkUpdate 잘들어왔음");
//	   log.debug("상위작업 no : {}",data.get("topWorkNo"));
//	   log.debug("바뀐 topwork 타이틀 : {}", data.get("topWorkTitle")); // 이걸로 상위작업이름 수정해야됨 ,db
//	   log.debug("바뀐 카테고리 넘버 : {}",data.get("twCategoryNo")); // 이걸로 카테고리 경로 바꿔줘야함
		String topWorkNo = data.get("topWorkNo");
		String beforeTopWorkTitle = "테스트99";
		String afterTopWorkTitle = data.get("topWorkTitle");
		String categoryNo = data.get("twCategoryNo");
		String twCategoryName = topworkservice.getCategoryName(categoryNo);

		log.debug("topWorkNo: {}", topWorkNo);
		log.debug("beforeTopWorkTitle : {}", beforeTopWorkTitle);
		log.debug("afterTopWorkTitle : {}", afterTopWorkTitle);
		log.debug("categoryNo : {}", categoryNo);
		log.debug("twCategoryName : {}", twCategoryName);
		log.debug("=============================================================");
		TopWorkVO topWorkVO = new TopWorkVO();
		topWorkVO.setTopWorkNo(topWorkNo);
		List<FileVO> files = uploadservice.getFilePath(topWorkVO);

		int cnt = 0;
		String beforeCName = "";
		String projectName = "";
		String topWorkName = "";
		for (FileVO f : files) {
			log.debug("해당 파일 이전 경로 : {}", f.getFilePath()); // 81\b\b1\6d14c35b-1922-417a-9b59-58083e332718_소극장 메모.txt
			String[] fileSeperate = f.getFilePath().split("\\\\");
			String afterPath = f.getFilePath().replace(fileSeperate[1], twCategoryName);
			afterPath = afterPath.replace(fileSeperate[2], afterTopWorkTitle);
			f.setFilePath(afterPath);
			log.debug("해당 파일 이후 경로 : {}", f.getFilePath());
			log.debug("파일 file_Name : {}", f.getFileName());

			// 여기서 업데이트 해주기
			int updateFilePath = uploadservice.updateFilePath(f);

			if (cnt == 0) {
				projectName = fileSeperate[0];
				beforeCName = fileSeperate[1];
				topWorkName = fileSeperate[2];
			}
			cnt++;
		}
		log.debug("프로젝트 이름 : {}", projectName);
		log.debug("카테고리 이전 이름 : {} ", beforeCName);
		log.debug("카테고리 이후 이름 : {} ", twCategoryName);
		log.debug("상위작업이름 : {}", topWorkName);
		File from = new File(path + projectName + "\\" + beforeCName + "\\" + topWorkName); // resources/upload/100/test1/1234
		File to = new File(path + projectName + "\\" + twCategoryName + "\\" + afterTopWorkTitle); // resources/upload/100/test2/1234
		try {
			if (!from.getPath().equals(to.getPath())) {
				FileUtils.moveDirectory(from, to);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		// 이전 경로 : 100/test1/진짜마지막테스트1/ 파일명.png
		// 바꿔줘야할 경로: 100/test2/진짜마지막테스트2/ 파일명

		return "수정중";
	}

	// 230104 SSY 파일트리 - 데이터를 트리 형태로 출력
	@PostMapping(value = "/filetree", produces = "application/json; charset=UTF8")
	@ResponseBody
	public List<FileTreeVO> fileTree(@RequestParam("projectNo") String proNo, FileTreeVO fileTreeVO) throws Exception {
		
		int i = 0;
		
		// dataRoom.jsp에서 proNo 받아오기
		log.debug("UploadController-filetree-ProNo : {}", proNo);
		
		// FILE_TREE테이블에서 proNo에 해당하는 데이터를 리스트로 가져오기
		List<FileTreeVO> fileTreeList = fileTreeService.dataList(proNo);
		
		// 프로젝트 이름 가져오기
		String proName = uploadservice.getProName(proNo);
		log.debug("프로젝트 이름 : {}", proName);
		// 여기다가 최상위 루트 만드는 거
		// proNo   fileId   parentId  depth  file_name
		//  102     102         #       0    가져와요 102-프로젝트 이름
		fileTreeVO.setProNo(proNo);
		fileTreeVO.setFileId(proNo);
		fileTreeVO.setParentId("#");
		fileTreeVO.setDepth(0);
		fileTreeVO.setFileName(proName);
		fileTreeList.add(fileTreeVO);
		
		// 최상위루트 데이터 삽입
		uploadservice.insertRow(fileTreeVO);
		
		log.debug("최상위 루트 생성? : {}", fileTreeVO.toString());
		log.debug("fileTreeList : {}", fileTreeList.toString());
		
		// 트리데이터가 있는지 여부 확인
		if(fileTreeList.size() > 1 ) {	// 있으면
			log.debug("fileTreeList.size() > 1");
			return new ArrayList<FileTreeVO>(fileTreeList);			
		}else { // 없으면
			List<FileVO> filePath = uploadservice.getFilePathWP(proNo);	// filePath 목록들 가져오기(isDeleted : F)
			log.debug("fileTreeList.size() <= 1");
			String[] cateName = new String[100];
			String[] seperator;
			String sep1 = "";
			String sep2 = "";
			for(FileVO f : filePath) { 	  // filePath =  102/상위작업/파일
				
				seperator = f.getFilePath().split("\\\\");
				
//				log.debug("파일경로 : {}", f.getFilePath());
//				log.debug("프로젝트 넘버 : {}", seperator[0]);
//				log.debug("카테고리 이름  : {}", seperator[1]);
//				log.debug("상위 작업 이름  : {}", seperator[2]);
//				log.debug("파일 저장 이름 : {}", seperator[3]);
				
				sep1 = seperator[1];  // 카테고리1 
				sep2 = seperator[2];  // 상위작업1
				if(cateName[i] == null) {
					cateName[i] = sep1; 
				}else {
					if(!cateName[i].equals(sep1)) { 
						cateName[++i] = sep1;
					}
				}
				
				// 카테고리 만드는 곳
//				fileTreeVO.setParentId(proNo);	// 최상위루트의 fileId와 일치해야 함
//				fileTreeVO.setFileId(sep1);	// 그냥 카테고리 이름으로 하자
//				fileTreeVO.setDepth(1);	// 카테고리 계층 : 1로 고정
//				fileTreeVO.setFileName(sep1);	// 카테고리 이름
//				log.debug("카테고리명 설정 후 : {}", fileTreeList.toString());
//				uploadservice.insertRow(fileTreeVO);
				
				// 카테고리 이름이 같은지 확인
				if(sep1 == seperator[1]) {	// 카테고리명 중복이면
					// 상위작업 만드는 곳
					fileTreeVO.setParentId(fileTreeVO.getFileId());	// 카테고리의 fileId와 일치해야 함
					fileTreeVO.setFileId(sep2);	// 그냥 상위작업 이름으로 하자
					fileTreeVO.setDepth(2);		// 상위작업 계층 : 2로 고정
					fileTreeVO.setFileName(sep2);	// 상위작업 이름
					log.debug("상위작업명 설정 후 : {}", fileTreeList.get(0).getFileId());
					uploadservice.insertRow(fileTreeVO);
					
					if (sep2 == seperator[2]) {	// 상위작업명 중복이면
						continue; // 102/카테1/상위1 == 102/카테1/상위1
					}
					// 그전 것이 102/카테1/상위1 == 102/카테1/상위2
					// 상위작업이 다를 때, 상위작업 만드는 곳
				}
				continue;	// 카테고리명 중복이면 위로 올라가
			}
			log.debug("카테고리 이름 : {}" , Arrays.toString(cateName) );
		} //end of else
		
		log.debug("파일리스트 체크 - 최종 : {}", fileTreeList.toString());
		return  new ArrayList<FileTreeVO>(fileTreeList);
	}

	@PostMapping(value = "/topWorkMovedUpdate", produces = "text/plain;charset=UTF-8")
	@ResponseBody
	public String topWorkMovedUpdate(@RequestBody Map<String, String> data, HttpServletRequest req) throws Exception {

		log.debug("topWorkNo : {}", data.get("topWorkNo")); // 310
		log.debug("이동전 카테고리 : {}", data.get("beforeTwCategoryNo")); // 94
		log.debug("이동후 카테고리 : {}", data.get("twCategoryNo")); // 93

		String topWorkNo = data.get("topWorkNo");
		String movedCategory = data.get("twCategoryNo");
		TopWorkVO topWorkVO = new TopWorkVO();
		topWorkVO.setTopWorkNo(topWorkNo);

		// 카테고리 이름 가져오는 거
		String twCategoryName = topworkservice.getCategoryName(movedCategory);
		log.debug("바뀐 카테고리 이름 : {}", twCategoryName);
		// 2.DB 파일경로 바꿔주기
		// resources/upload/projectId/카테고리/
		// 탑워크넘버로 topworkfile 값을 가져와 해당 file_l_no의 값의 경로를 뽑아온다
		// 뽑아온 것들을 list<fileVO>로 담아 각각
		String path = req.getSession().getServletContext().getRealPath("resources/upload/");
		List<FileVO> files = new ArrayList<FileVO>();
		// 해당 상위작업 no를 가지고 그에 해당하는 파일들 목록 가져오기
		files = uploadservice.getFilePath(topWorkVO);

		int cnt = 0;
		String beforeCName = "";
		String projectName = "";
		String topWorkName = "";
		for (FileVO f : files) {
			log.debug("해당 파일 이전 경로 : {}", f.getFilePath()); // 81\b\b1\6d14c35b-1922-417a-9b59-58083e332718_소극장 메모.txt
			String[] fileSeperate = f.getFilePath().split("\\\\");
			// log.debug("프로젝트 이름 : {}",fileSeperate[0]); // 81
			// log.debug("카테고리 이름 : {}", fileSeperate[1]); // b
			String afterPath = f.getFilePath().replace(fileSeperate[1], twCategoryName);
			// log.debug("바뀐 경로 이름 : {}", afterPath);
			f.setFilePath(afterPath);
			// log.debug("해당 파일 이후 경로 : {}", f.getFilePath());
			// log.debug("파일 file_Name : {}",f.getFileName());

			// 여기서 업데이트 해주기
			int updateFilePath = uploadservice.updateFilePath(f);

			if (cnt == 0) {
				projectName = fileSeperate[0];
				beforeCName = fileSeperate[1];
				topWorkName = fileSeperate[2];
			}
			cnt++;
		}
		log.debug("프로젝트 이름 : {}", projectName);
		log.debug("카테고리 이전 이름 : {} ", beforeCName);
		log.debug("카테고리 이후 이름 : {} ", twCategoryName);
		File from = new File(path + projectName + "\\" + beforeCName + "\\" + topWorkName); // resources/upload/100/test1/1234
		File to = new File(path + projectName + "\\" + twCategoryName + "\\" + topWorkName); // resources/upload/100/test2/1234
		try {
			if (!from.getPath().equals(to.getPath())) {
				FileUtils.moveDirectory(from, to);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return "수정완료~OJH";
	}

	@PostMapping(value = "/topWorkDelFile", produces = "text/plain;charset=UTF-8")
	@ResponseBody
	public String topWorkDelFile(String topWorkNo) {
		log.debug("topworkNo : {}", topWorkNo);
		TopWorkVO topwork = new TopWorkVO();
		topwork.setTopWorkNo(topWorkNo);
		// topwork에 걍 넣어서 file_l_no 찾아서 f로 변경
		int result = uploadservice.topworkFileDel(topwork);

		return "해당 상위작업 파일들 삭제 상태 T로 바꿈";
	}

	@PostMapping(value = "/deleteCategoryFile", produces = "text/plain;charset=UTF-8")
	@ResponseBody
	public String deleteCategoryFile(String twCategoryNo) {
		log.debug("twCategoryNo : {}", twCategoryNo);

		// 해당 카테고리 관련된 모든 폴더 파일 다 삭제 상태로 바꿔줘야함
		// 1. fileLocationVO에서 file_l_no 가져오기
		List<FileLocationVO> locations = uploadservice.getfileLocations(twCategoryNo);
		for (FileLocationVO f : locations) {
			log.debug("file_l_no : {}", f.getFileLNo());
			// 각각 가져온 file_l_no로 file_location 상태 false로 변경
			uploadservice.setLocationisDel(f.getFileLNo());
			// 2. 해당 카테고리의 상위작업들 파일 상태 false로 바꿔줌
			uploadservice.setFileisDel(f.getFileLNo());
		}
		return "왔다감";
	}

	// 카테고리 수정시 진짜 폴더이름도 수정하는 메서드
	@PostMapping(value = "/updateCategoryFileLocation", produces = "text/plain;charset=UTF-8")
	@ResponseBody
	public ResponseEntity<String> updateCategoryFileLocation(String beforeCategory, String updateCategory, String proNo,
			String twCategoryNo, HttpServletRequest req) throws Exception {
		log.debug("이전 카테고리 이름 : {}", beforeCategory); // 이전 카테고리 이름
		log.debug("바뀐 카테고리 이름 : {}", updateCategory); // 바뀐 카테고리 이름
		log.debug("프로젝트 이름 : {}", proNo); // 프로젝트 이름
		log.debug("카테고리 번호 : {} ", twCategoryNo); // 카테고리 번호
		log.debug("카테고리 번호 타입 : {}", twCategoryNo.getClass().getTypeName());
		// 해당 카테고리에 있는 모든 파일 자료들 가져오기
		List<FileVO> categoryFiles = uploadservice.getCategoryFiles(twCategoryNo);
		for (FileVO file : categoryFiles) {
			log.debug("파일 경로 : {}", file.getFilePath());
			String changedFilePath = file.getFilePath().replaceFirst(beforeCategory, updateCategory);
			log.debug("파일 바뀐 경로 : {}", changedFilePath);
			FileVO cfile = new FileVO();
			cfile.setFilePath(changedFilePath);
			cfile.setFileName(file.getFileName());

			// 바꾼 정보 db 수정
			uploadservice.changeFilePath(cfile);

		}

		String path = req.getSession().getServletContext().getRealPath("resources/upload/");

		String beforeFileLocation = getFolder(proNo, beforeCategory); // 프로젝트명/이전 카테고리
		String afterFileLocation = getFolder(proNo, updateCategory); // 프로젝트명/ 바뀐 카테고리

		File file = new File(path + beforeFileLocation);
		File newFile = new File(path + afterFileLocation);
		log.debug("이전경로 : {}", file.getPath());
		log.debug("새로운 경로 : {}", newFile.getPath());

		boolean result = file.renameTo(newFile);
		log.debug("result");

		return new ResponseEntity<String>("폴더이름수정!", HttpStatus.OK);
	}

	// 파일업로드시 진짜 폴더에 저장하는 메서드
	@PostMapping(value = "/uploadAjaxAction", produces = "application/json; charset=UTF8")
	@ResponseBody
	public ResponseEntity<List<FileVO>> uploadAjaxPost(MultipartFile[] uploadFile,
			@RequestParam("jsonData") String data, HttpServletRequest req) throws Exception {

		String path = req.getSession().getServletContext().getRealPath("resources/upload");
		log.debug("path : " + path);
		List<FileVO> list = new ArrayList<FileVO>();

		log.debug("data : {} ", data);
		JsonParser parser = new JsonParser();
		JsonElement element = parser.parse(data);

		String projectId = element.getAsJsonObject().get("projectId").getAsString(); // 프로젝트명
		String pathLocation = element.getAsJsonObject().get("fileLocation").getAsString(); // 카테고리
		String pathUnderLocation = element.getAsJsonObject().get("topWorkTitle").getAsString(); // 상위작업
		String topWorkNo = element.getAsJsonObject().get("topWorkNo").getAsString(); // 해당 작업 topWorkNo
		String uploadFolderPath = getFolder(projectId, pathLocation);

		// 새로운 fileLocationVO를 생성해줘야함
		// 일단 FileLocation 집어넣자
		FileLocationVO fileLocationVO = new FileLocationVO();
		fileLocationVO.setFileLocation("TOPWORK");
		uploadservice.insertFileLocation(fileLocationVO);
		int fileNo = fileLocationVO.getFileLNo();
		// 등록한 시퀀스 가져오기
		log.debug("fileNo : {}", fileNo);
		// 해당 생성된 상위작업에 첨부위치번호 넣어주기 topwork <-> fileLocation
		Map<String, String> uploadData = new HashMap<String, String>();
		uploadData.put("topWorkNo", topWorkNo);
		uploadData.put("fileNo", String.valueOf(fileNo));
		log.debug("파일번호 등록할 놈 : {}", uploadData);
		topworkservice.updateTopworkFile(uploadData); // 첨부 위치번호 연결 성공

		log.debug("프로젝트 번호 : {}", projectId);
		log.debug("프로젝트 작업 목록 : {}", pathLocation);
		File uploadPathunder = new File(path, getFolder(uploadFolderPath, pathUnderLocation));
		log.debug("uploadPath :{}", uploadPathunder); // 받아온 데이터로 폴더를 생성

		if (!uploadPathunder.exists()) {
			uploadPathunder.mkdirs();
		}
		for (MultipartFile multipartFile : uploadFile) {

			FileVO fileVO = new FileVO();

			// UUID 로 파일 중복 방지
			String uploadFileName = multipartFile.getOriginalFilename();
			fileVO.setFileRealName(uploadFileName); // 진짜 이름 설정

			String uploadFileSize = String.valueOf(multipartFile.getSize());
			fileVO.setFileSize(uploadFileSize); // 파일 사이즈 설정

			uploadFileName = uploadFileName.substring(uploadFileName.lastIndexOf("\\") + 1);

			UUID uuid = UUID.randomUUID();
			uploadFileName = uuid.toString() + "_" + uploadFileName; // 2lkwake9fdslafk;la_남성이미지.png
			fileVO.setFileName(uploadFileName);

			try {
				File saveFile = new File(uploadPathunder, uploadFileName);
				multipartFile.transferTo(saveFile);
				fileVO.setUuid(uuid.toString()); // 12dsakj12jkldsakldd21
				fileVO.setFilePath(uploadFolderPath + "\\" + pathUnderLocation + "\\" + uploadFileName);

				fileVO.setFileLNo(fileNo);
				if (checkImageType(saveFile)) {
					fileVO.setImage("true");
//               // 썸내일 만드는 것
//               FileOutputStream thumbnail = new FileOutputStream(new File(uploadPathunder, "s_"+uploadFileName));
//               Thumbnailator.createThumbnail(multipartFile.getInputStream(), thumbnail, 50, 50);
//               thumbnail.close();
				} else {
					fileVO.setImage("false");
				}
				log.debug(fileVO.toString());
				uploadservice.insertFile(fileVO);
				list.add(fileVO);
			} catch (Exception e) {
				log.error(e.getMessage());
			}
		}

		// 리스트에 다 담으면 해당 파일 넣기
		// int uploadCnt = uploadservice.insertFiles(list);

		log.debug("보내는 리스트 출력 : {}", list.toString());
		return new ResponseEntity<List<FileVO>>(list, HttpStatus.OK);
	}

	// 프로젝트 id와 카테고리를 받아와서 폴더 형태 / 로 만들어주는 메소드
	private String getFolder(String projectId, String pathLocation) {
		String str = projectId + "-" + pathLocation;
		return str.replace("-", File.separator);
	}

	// 파일인지 이미지인지 구별해주는 메서드
	private boolean checkImageType(File file) {
		try {
			String contentType = Files.probeContentType(file.toPath());
			log.debug("contentType : {}", contentType);
			return contentType.startsWith("image");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	/**
	 * 김진호
	 * 
	 * @param topWorkVO
	 * @return 조회할 게시물의 첨부파일 목록
	 * @throws Exception
	 */
	@PostMapping(value = "selectFile", produces = "application/json; charset=utf-8")
	@ResponseBody
	public List<FileVO> selectFile(@RequestBody TopWorkVO topWorkVO) throws Exception {
		List<FileVO> fileList = uploadservice.selectFile(topWorkVO);

		return fileList;
	}

}