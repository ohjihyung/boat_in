package kr.or.ddit.controller.chat;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.json.simple.JSONObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.controller.chat.service.IChatService;
import kr.or.ddit.controller.member.service.IMemberService;
import kr.or.ddit.vo.ChatContentVO;
import kr.or.ddit.vo.ChatRoomVO;
import kr.or.ddit.vo.ChatUserVO;
import kr.or.ddit.vo.MemberVO;
import lombok.extern.slf4j.Slf4j;

@Controller
@Slf4j
@RequestMapping("/chat")
public class ChatController {

	@Inject
	IMemberService memberService;

	@Inject
	IChatService chatService;

	/**
	 *  sidebar boat-chat 클릭시 채팅방 페이지 보여주는 메서드
	 *
	 * @return content/chatMain.jsp
	 */
	@GetMapping("/chatMain")
	public String chatMain() {
		return "content/chatMain";
	}


	@PostMapping(value="/getNameById", produces = "text/plain;charset=UTF-8")
	@ResponseBody
	public ResponseEntity<String> getNameById(@RequestBody Map<String, String> data) throws Exception{
		//log.debug("myId : {}", data.get("myId"));
		String memberId = data.get("myId");
		MemberVO vo = new MemberVO();
		vo.setMemberId(memberId);
		MemberVO mem  = memberService.selectMember(vo);
		String name = mem.getMemberName();
		//log.debug("membername : {}", name);
		return new ResponseEntity<String>(name, HttpStatus.OK);
	}

	@PostMapping(value="/getRoomsById", produces = "application/json;charset=UTF-8")
	@ResponseBody
	public ResponseEntity<List<Map<String, Object>>> getRoomsById(@RequestBody Map<String,String> data) throws Exception {

		List<Map<String, Object>> returnList = new ArrayList<Map<String,Object>>();

		log.debug("myId in getRoomsById : {}", data.get("myId"));
		//  myId랑 방번호 얻어서 chat no read chat_no_read 확인 카운트로 이거는 빨간색 띄워줄거 그리고
		// {roomId : 15, notReadCnt : 1, roomTitle : '방제목', 'lastChatContent' : 'ㅎㅇ', 'lastchatDate' : '2012/11/21' , 'roomUserImages' : { } }
		String memberId = data.get("myId");
		List<ChatRoomVO> rooms = chatService.getRoomsById(memberId);
			for(ChatRoomVO room : rooms) {
				Map<String, Object> returnData = new HashMap<String, Object>();
				String roomId = room.getChatRNo();

				//해당방에 관하여 안읽은 글 갯수 가져오기
				Map<String, String> getNCntData = new HashMap<String, String>();
				getNCntData.put("roomId", roomId);
				getNCntData.put("memberId", memberId);
				String notReadCnt = chatService.getNotReadCnt(getNCntData);

				//해당방 마지막 채팅 정보 가져오기
				ChatContentVO contentVO = new ChatContentVO();
				contentVO = chatService.getLastChat(roomId);

				//해당방 모든 유저들 이미지 가져오기
				//해당방 나간사람 제외하고 뽑을라면 chatUSER 테이블에서 가져와야함
				List<MemberVO> mempics = new ArrayList<MemberVO>();
				// 여기까지
				mempics = chatService.getuserImgs(roomId);
				returnData.put("roomUserImages", mempics);
				returnData.put("lastChatContent", contentVO.getChatContent());
				returnData.put("lastChatDate", contentVO.getChatDate());
				returnData.put("notReadCnt", notReadCnt);
				returnData.put("roomId", room.getChatRNo());
				returnData.put("roomTitle", room.getChatRTitle());

				returnList.add(returnData);
		}

		return  new ResponseEntity<List<Map<String,Object>>>(returnList,HttpStatus.OK);
	}

	@PostMapping(value="/getChatContent", produces = "application/json;charset=utf-8")
	@ResponseBody
	public ResponseEntity<List<Object>> getChatContent(@RequestBody Map<String, String> data) throws Exception{
		System.out.println("getChatContent에 접속" + data.get("roomId"));
		String roomId = data.get("roomId");
		List<Object> datas = new ArrayList<Object>();

		//해당 체팅방 이름 가져오기
		String chatRName = chatService.getRoomTitleByRoomId(roomId);


		// 여기서 해당방 chat_content 시간순으로 다 가지고 온다
		List<ChatContentVO> chatList = new ArrayList<ChatContentVO>();
		chatList = chatService.getChatContents(roomId);
		//그 가져온 애들 뿌려주기 위해 data 만

		for(ChatContentVO c : chatList) {
			JSONObject obj = new JSONObject();
			obj.put("memberName", c.getMemberName());
			obj.put("chatContent", c.getChatContent());
			obj.put("memberprofile", c.getMemberPic());
			String formatTime = c.getChatDate().substring(11, 16);  //2023/01/12/10:06:56
			obj.put("time", formatTime);
			obj.put("roomTitle", chatRName);
			//log.debug("formatTime : {}", formatTime);
			datas.add(obj);

		}

		return new ResponseEntity<List<Object>>(datas,HttpStatus.OK);
	}


	@PostMapping(value="/getMembers", produces = "application/json;charset=utf-8")
	@ResponseBody
	public ResponseEntity<List<MemberVO>> getMembers() throws Exception{
		List<MemberVO> memberList = memberService.getAllMember();
		return new ResponseEntity<List<MemberVO>>(memberList,HttpStatus.OK);
	}


	@PostMapping(value="/createRoom", produces = "application/json;charset=utf-8")
	@ResponseBody
	public ResponseEntity<Integer> createRoom(@RequestBody Map<String, Object> data) throws Exception{
		log.debug("data : {}", data);

		//받아온데이터로 채팅방 만들기
//data : {chatRoomName=DDDD, chatRoomCreater=rkwkakstp123@gmail.com, roomLimit=5, memarr={0=fnvkfl12@naver.com, 1=jajih29590@dentaltz.com}}
		ChatRoomVO roomVO = new ChatRoomVO();
		String creater = data.get("chatRoomCreater").toString();
		String roomTitle = data.get("chatRoomName").toString();
		String chatRPerson = data.get("roomLimit").toString();
		log.debug("creater : {}", creater);
		log.debug("roomTitle : {}", roomTitle);
		roomVO.setCreaterId(creater);
		roomVO.setChatRTitle(roomTitle);
		roomVO.setChatRPerson(chatRPerson);
		chatService.insertRoom(roomVO);
		Map<String,String> invitedMems =(Map<String, String>) data.get("memarr");
		Iterator<String> keys = invitedMems.keySet().iterator();
	        while( keys.hasNext() ){
	            ChatUserVO chatUserVO = new ChatUserVO();
	        	String key = keys.next();
	            String member = invitedMems.get(key);
	            chatUserVO.setMemberPk(member);
	            chatService.insertInvitedUser(chatUserVO);
	            //log.debug("value : {}", invitedMems.get(key));
	        }
	     //생성자도 넣어준다
	     ChatUserVO chatUserVO = new ChatUserVO();
	     chatUserVO.setMemberPk(creater);
	     int result = chatService.insertInvitedUser(chatUserVO);

		return new ResponseEntity<Integer>(result,HttpStatus.OK);
	}



}
