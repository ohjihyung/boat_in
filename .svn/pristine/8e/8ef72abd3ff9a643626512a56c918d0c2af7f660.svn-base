<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
   xmlns:security="http://www.springframework.org/schema/security"
   xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- 자바빈 객체 -->
	<bean id="customAccessDenied" class="kr.or.ddit.controller.security.CustomAccessDeniedHandler"/>
	<!--
		자바 빈 등록은
		CustomLoginSuccessHandler  customLoginSuccess = new  CustomLoginSuccessHandler() 
		와 같다 
	-->
	<bean id="customLoginSuccess" class="kr.or.ddit.controller.security.CustomLoginSuccessHandler"/>
	<!-- 사용자가 정의한 비밀번호 암호화 처리기를 빈으로 등록함. -->
	<bean id="customPasswordEncoder" class="kr.or.ddit.controller.security.CustomNoOpPasswordEncoder" />
	<!-- 비밀번호 암호화 처리기 -->
<!-- 	<bean id="bcryptPasswordEncoder" class ="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" /> -->
	<!-- MEM:MEM_AUTH =1:N 을사용 -->
	<bean id="customUserDetailsService" class="kr.or.ddit.controller.security.CustomUserDetailsService"  />
	<security:http>
		<security:intercept-url pattern="/security/board/list" access="permitAll" />
<!-- 		<security:intercept-url pattern="/security/board/register" access="hasRole('ROLE_MEMBER')" /> -->
<!-- 		<security:intercept-url pattern="/security/notice/list" access="permitAll" /> -->
<!-- 		<security:intercept-url pattern="/security/notice/register" access="hasRole('ROLE_ADMIN')" /> -->
		<!-- 폼 기반 인증 기능을 사용함  -->
		
<!-- 		<security:form-login/> -->
		
		<!-- 
			사용자 정의 로그인 페이지.
			요청 URL :/security/login
			요청 method : get
			1) org.hdcd.security.LoginController.java 생성
			2) /login 요청URI를 처리해주는 mapping된 loginForm 메소드 정의
			3) views/loginForm JSP 생성
		 -->
		 <!-- 로그인 : 인증(autrentication) 성공  처리자 
			ex) 로그인 성공 후에 로그인 이력을 기록		 
		 -->
		<security:form-login login-page="/security/login"  
			authentication-success-handler-ref="customLoginSuccess"/>
		
		<!-- 접근 거부 처리자의 URI(URI + 기능) 를 지정(로그인 실패) -->
<!-- 		<security:access-denied-handler error-page="/accessError" /> -->
		<!-- customAccessDenied : 자바빈 객체 명 -->
<!-- 		<security:access-denied-handler ref="customAccessDenied"/> -->	

		<!-- 쿠키의 유효시간간 (초)   604800  7일   자동로그인  쿠기활용으로 자동로그인유지 -->
		<security:remember-me data-source-ref="dataSource" token-validity-seconds="604800" />
		
		<!-- 로그아웃 처리를 위한 URI를 지정하고, 로그아웃 한 후에 세션을 무효화 함 -->
		<security:logout logout-url="/logout" invalidate-session="true" delete-cookies="remember-me,JSESSION_ID" />
		
	</security:http>
	
	<!-- 
		authentication : 인증
		manager : 매니저   
	-->
	<security:authentication-manager>
		<!-- provider : 제공  -->
		<!-- user-service-ref   =>  MEM:MEM_AUTH =1:N 을 사용 사용자가 정의한 테이블 사용 -->
		<security:authentication-provider user-service-ref="customUserDetailsService">
		
		
		
		<!-- 1) 데이터 소스를 지정   기본적으로 제공되는 USERS,AUTHORITIES 테이블명 같아야함 -->
<!-- 		<security:jdbc-user-service data-source-ref="dataSource"/>  -->
		<!--  data-source-ref="dataSource" -> 루트컨텍스트에 설정한 dataSOurce 빈  -->
		<!-- 2) 사용자가 정의한 비밀번호 암호화 처리기를 지정함 
			스프링 시큐리티 5부터는 기본적으로 PasswordEncoder를 지정해야함
			재대로하려면 USERS 테이블에 비밀번호를 암호화하여 저장해 함
			but, 우리는 연습을 하고 있으므로 암호화를 고려하지 않음
		-->
		<security:password-encoder ref="customPasswordEncoder"/>
		
		<!-- 스프링 시큐리티에서 제공되는BCruptPasswordEncoder 클래스를 빈으로 등록  -->
<!-- 		<security:password-encoder ref="bcryptPasswordEncoder" /> -->
		
		
		
		
<!-- 			<security:user-service> -->
				<!-- 
					noop : 스프링 시큐리티 5버전 부터 패스워드 암호화 처리기 사용이 필수 
					  noop 은 암호화 처리기를 사용하지 않겠다라는 의미
				-->
				<!-- id: member/ password: 1234 -->
<!-- 				<security:user name="member" password="{noop}1234" authorities="ROLE_MEMBER" /> -->
				<!-- id: admin/ password: 1234 -->
<!-- 				<security:user name="admin" password="{noop}abcd" authorities="ROLE_MEMBER,ROLE_ADMIN" /> -->
<!-- 			</security:user-service> -->
		</security:authentication-provider>
	</security:authentication-manager>
</beans>