package kr.or.ddit.controller.project;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.inject.Inject;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.google.gson.JsonElement;
import com.google.gson.JsonParser;

import kr.or.ddit.controller.project.service.IProjectNoticeService;
import kr.or.ddit.controller.upload.IFileTreeService;
import kr.or.ddit.controller.upload.IUploadService;
import kr.or.ddit.vo.DevinComentVO;
import kr.or.ddit.vo.DevinVO;
import kr.or.ddit.vo.FileLocationVO;
import kr.or.ddit.vo.FileVO;
import kr.or.ddit.vo.ProjectNoticeVO;
import kr.or.ddit.vo.TopWorkVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/projectNotice")
public class ProjectNoticeController {
	
	@Inject
	private IProjectNoticeService service;
	
	@Autowired
	IFileTreeService fileTreeService;
	@Autowired
	IUploadService uploadservice;
	
	/**
	 * 채진영
	 * 여기가 getMapping 이니까 url에서 proNo를 가져올 수 있는 것임! @RequestParam으로~
	 * @param proNo
	 * @return 해당 프로젝트의 전체 게시물 List 가져오기
	 * @throws Exception
	 */
	@GetMapping(value = "/projectNoticeList", produces = "application/json; chartset=utf-8")
	@ResponseBody
	public List<ProjectNoticeVO> projectNoticeList(@RequestParam(name = "proNo", required = false) String proNo) throws Exception {
		log.debug("proNo :::::{} " , proNo);
		List<ProjectNoticeVO> projectNoticeList = service.selectList(proNo);
		log.debug("projectNoticeList:proNo가지고가니?: {} ", projectNoticeList);
		
		return projectNoticeList;
	
	}
	
	/**
	 * 채진영
	 * @param projectNoticeVO
	 * @return 조회할 공지사항 게시글 번호 1개
	 * @throws Exception
	 */
	@PostMapping(value = "/select", produces = "application/json; charset=utf-8")
	@ResponseBody
	public ProjectNoticeVO ProjectNoticeSelect(@RequestBody ProjectNoticeVO projectNoticeVO) throws Exception {
	    log.debug("받은 객체(조회할 게시글 번호 1개) : {}"+ projectNoticeVO);
		
	    ProjectNoticeVO vo = service.select(projectNoticeVO.getProNoticeNo());
	    log.debug("그 게시글 한줄 받아온것 ProjectNoticeVO : {}"+ vo);
	    
	    return vo;
	    
	    
	}
	
	/**
	 * shift+alt+j 하면 주석 고고링
	 * 채진영 
	 * @param projectNoticeVO
	 * @return 인서트 성공 1 "OK"=>"그번호 가지고 디테일!" , 실패 0 "NG"=> "null"
	 * @throws Exception
	 */
	@PostMapping(value = "/insert", produces = "application/json; charset=utf-8")
	@ResponseBody
	public int ProjectNoticeInsert(@RequestParam("sendData") String data, HttpServletRequest req, MultipartFile[] uploadFile) throws Exception  {
	
		
		 System.out.println("들어왔냐 지형이~");
		JsonParser parser = new JsonParser();
		JsonElement element = parser.parse(data);
		String memberId =  element.getAsJsonObject().get("memberId").getAsString();
		System.out.println(memberId);
		// 여기서 각각 꺼내서 인서트 해줘야함!
		
		/*
		 * log.debug("projectNoticeVO 인서트할거 모음: {}"+projectNoticeVO);
		 * 
		 * int cnt=service.insert(projectNoticeVO); log.debug("인서트한 cnt :"+cnt);
		 * log.debug("ProNoticeNo(공지사항번호) :"+projectNoticeVO.getProNoticeNo());
		 * 
		 * if(cnt > 0) { ProjectNoticeVO vo =
		 * service.select(projectNoticeVO.getProNoticeNo());
		 * log.debug("ProjectNoticeVO: {}" + vo); return vo; } return null;
		 */
			
		return 1;
	}
	
	/**
	 * shift+alt+j 하면 주석 고고링
	 * 채진영 
	 * @param vo
	 * @return 업데이트 성공 1 "OK"=>"그번호 가지고 디테일!" , 실패 0 "NG"=> "null"
	 * @throws Exception
	 */
	@PostMapping(value = "/update", produces = "application/json; charset=utf-8")
	@ResponseBody
	public ProjectNoticeVO ProjectNoticeUpdate(@RequestBody ProjectNoticeVO projectNoticeVO) throws Exception	{
		log.debug("projectNoticeVO 업데이트용: {}", projectNoticeVO);
		
		int cnt=service.update(projectNoticeVO);
		log.debug("업데이트한 cnt :"+cnt);
		log.debug("업데이트용 ProNoticeNo(공지사항번호):"+projectNoticeVO.getProNoticeNo());

		if(cnt > 0) {
			ProjectNoticeVO vo = service.select(projectNoticeVO.getProNoticeNo());
			log.debug("ProjectNoticeVO 업데이트용 내용 전체 devInVO: {}", vo);
			return vo;
		}
		
		return null;
	}
	
	/**
	 * 채진영
	 * @param vo
	 * @return 데브인 삭제
	 */
	@PostMapping(value = "/delete", produces = "application/json; charset=utf-8")
	@ResponseBody
	public String ProjectNoticeDelete(@RequestBody ProjectNoticeVO projectNoticeVO) throws Exception {
		log.debug("삭제할 객체 : {}", projectNoticeVO);
		service.delete(projectNoticeVO);
		
		return "삭제 성공";
	}
	
	/**
	 * 채진영
	 * 여기가 getMapping 이니까 url에서 proNo를 가져올 수 있는 것임! @RequestParam으로~
	 * @param proNo
	 * @return 해당 프로젝트의 참여가 1인 멤버 List 가져오기
	 * @throws Exception
	 */
	@PostMapping(value = "/selectJoinMemberList", produces = "application/json; chartset=utf-8")
	@ResponseBody
	public List<ProjectNoticeVO> selectJoinMemberList(@RequestParam(name = "proNo", required = false) String proNo) throws Exception {
		log.debug("proNo ::: {} " , proNo);
		List<ProjectNoticeVO> selectJoinMemberList = service.selectJoinMemberList(proNo);
		log.debug("selectJoinMemberList ::: {} ", selectJoinMemberList);
		
		return selectJoinMemberList;
	
	}
	
	// 파일하는거 채진영용 따로 파기..하나
	// 파일업로드시 진짜 폴더에 저장하는 메서드
	@PostMapping(value = "/uploadAjaxAction", produces = "application/json; charset=UTF8")
	@ResponseBody
	public String uploadAjaxPost(HttpServletRequest req, ProjectNoticeVO projectNoticeVO, MultipartFile[] uploadFile) throws Exception {
		log.debug("채진영projectNoticeVO(가져오는 파일 및 내용 전체?) ::: {} " , projectNoticeVO);
	
		// 진짜 파일이 생기는 경로를 찾아서 만들어주기
		String path = req.getSession().getServletContext().getRealPath("resources/upload");
		log.debug("채진영 path : " + path);
		File fileJ = new File(path, makeFolder(projectNoticeVO.getProNo(), "공지사항"));
		
		if(!fileJ.exists()) {
			fileJ.mkdirs();
		}
		
		
		 // 파일경로 담을 빈 리스트
		List<ProjectNoticeVO> filePathList = new ArrayList<ProjectNoticeVO>();	 	// 파일경로 담을 빈 리스트
		
		// 내가 만든 공지사항 폴더에서 파일 객체를 내가 만든 경로에 넣는 작업
		for (MultipartFile multipartFile : uploadFile) {
			try {
				File saveFile = new File(fileJ, multipartFile.getOriginalFilename());
				multipartFile.transferTo(saveFile); // 진짜 경로에다가 파일 넣은것 
				//그 후에 여기서 insert처리
				ProjectNoticeVO vo = new ProjectNoticeVO();
				vo.setProNoticeFile(saveFile.getPath());
				//newvo.setProNoticeFile(saveFile.getPath());
				//service.insert(projectNoticeVO)
				log.debug("파일경로 : {}", saveFile.getAbsolutePath());
				log.debug("파일경로 : {}", saveFile.getPath());
			} catch (Exception e) {
				log.error(e.getMessage());
			}
			
		}
		
		return ""; 	// 클라이언트 쪽에서 사용하기 위해서 Path리턴!
	}
	
	// 프로젝트 id와 카테고리를 받아와서 폴더 형태 / 로 만들어주는 메소드
		private String makeFolder(String a, String b) {
			String str = a + "-" + b;
			return str.replace("-", File.separator);
		}
	
}
