package kr.or.ddit.controller.chat;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.json.simple.JSONObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.controller.chat.service.IChatService;
import kr.or.ddit.controller.member.service.IMemberService;
import kr.or.ddit.vo.ChatContentVO;
import kr.or.ddit.vo.ChatRoomVO;
import kr.or.ddit.vo.MemberVO;
import lombok.extern.slf4j.Slf4j;

@Controller
@Slf4j
@RequestMapping("/chat")
public class ChatController {

	@Inject
	IMemberService memberService;

	@Inject
	IChatService chatService;

	/**
	 *  sidebar boat-chat 클릭시 채팅방 페이지 보여주는 메서드
	 *
	 * @return content/chatMain.jsp
	 */
	@GetMapping("/chatMain")
	public String chatMain() {
		return "content/chatMain";
	}


	@PostMapping(value="/getNameById", produces = "text/plain;charset=UTF-8")
	@ResponseBody
	public ResponseEntity<String> getNameById(@RequestBody Map<String, String> data) throws Exception{
		//log.debug("myId : {}", data.get("myId"));
		String memberId = data.get("myId");
		MemberVO vo = new MemberVO();
		vo.setMemberId(memberId);
		MemberVO mem  = memberService.selectMember(vo);
		String name = mem.getMemberName();
		//log.debug("membername : {}", name);
		return new ResponseEntity<String>(name, HttpStatus.OK);
	}

	@PostMapping(value="/getRoomsById", produces = "application/json;charset=UTF-8")
	@ResponseBody
	public ResponseEntity<List<ChatRoomVO>> getRoomsById(@RequestBody Map<String,String> data) throws Exception {
		log.debug("myId in getRoomsById : {}", data.get("myId"));
		String memberId = data.get("myId");
		List<ChatRoomVO> rooms = chatService.getRoomsById(memberId);
			for(ChatRoomVO room : rooms) {
			log.debug("roomTitle : {}", room.getChatRTitle());
			log.debug("roomId : {} ", room.getChatRNo());
		}

		return  new ResponseEntity<List<ChatRoomVO>>(rooms, HttpStatus.OK);
	}

	@PostMapping(value="/getChatContent", produces = "application/json;charset=utf-8")
	@ResponseBody
	public ResponseEntity<List<Object>> getChatContent(@RequestBody Map<String, String> data) throws Exception{
		System.out.println("getChatContent에 접속" + data.get("roomId"));
		String roomId = data.get("roomId");
		List<Object> datas = new ArrayList<Object>();

		//해당 체팅방 이름 가져오기
		String chatRName = chatService.getRoomTitleByRoomId(roomId);


		// 여기서 해당방 chat_content 시간순으로 다 가지고 온다
		List<ChatContentVO> chatList = new ArrayList<ChatContentVO>();
		chatList = chatService.getChatContents(roomId);
		//그 가져온 애들 뿌려주기 위해 data 만

		for(ChatContentVO c : chatList) {
			JSONObject obj = new JSONObject();
			obj.put("memberName", c.getMemberName());
			obj.put("chatContent", c.getChatContent());
			obj.put("memberprofile", c.getMemberPic());
			String formatTime = c.getChatDate().substring(11, 16);  //2023/01/12/10:06:56
			obj.put("time", formatTime);
			obj.put("roomTitle", chatRName);
			//log.debug("formatTime : {}", formatTime);
			datas.add(obj);

		}

		return new ResponseEntity<List<Object>>(datas,HttpStatus.OK);
	}

}
