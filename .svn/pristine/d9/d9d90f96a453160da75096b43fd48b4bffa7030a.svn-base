package kr.or.ddit.handler;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import kr.or.ddit.vo.ChatMemVO;

public class ChatHandler extends TextWebSocketHandler{
	//접속한 사람들(웹소켓 세션) 담아둘 리스트
	private static List<WebSocketSession> list = new ArrayList<WebSocketSession>();
    // session, 방 번호가 들어간다.
    private Map<String, List<ChatMemVO>> sessionList = new HashMap<String, List<ChatMemVO>>();
    private List<ChatMemVO> charMemList = new ArrayList<ChatMemVO>();

	@Override
	public void afterConnectionEstablished(WebSocketSession session) throws Exception {
		System.out.println("잘들어왔나?" + session.getId());
		list.add(session);
		session.sendMessage(new TextMessage("연결 성공"));
	}
	@Override // 메세지가 클라이언트로 부터 왔을 때
	protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
		//String uMsg = message.getPayload();
		// 방번호도 여기서 처리해라

		String msg = "";
		System.out.println("클라이언트가 보낸 메세지 : " + message.getPayload());

		//받아온 stringify data 데이터 분해 하기
		JsonParser parser = new JsonParser();
		JsonObject obj = (JsonObject)parser.parse(message.getPayload());
		String roomId = obj.get("roomId").getAsString();
		String myName = obj.get("myName").getAsString();
		String myId = obj.get("myId").getAsString();
		System.out.println( "메세지 길이 :" +  obj.size());

		// 채팅방을 눌러서 접속시 obj.size == 3이다  이때 해당 방에 해당 유저를 담아준다
		if(obj.size() == 3) {
			ChatMemVO cmVO = new ChatMemVO();
			System.out.println(session);
			System.out.println(roomId);
			System.out.println(myName);
			System.out.println(myId);
			cmVO.setWsSession(session);
			cmVO.setRoomId(roomId);
			cmVO.setMyName(myName);
			cmVO.setMyId(myId);
			charMemList.add(cmVO);
			sessionList.put(roomId, charMemList);
		}
		if(obj.size() == 4) {
			msg = obj.get("msg").getAsString();
		}
		if(obj.size() == 5) {
			 if(sessionList.size() != 0) {
				 for(int i = 0; i < sessionList.get(roomId).size(); i++) {
					 ChatMemVO mem = sessionList.get(roomId).get(i);
					 if(mem.getMyId().equals(myId)) {
						 sessionList.get(roomId).remove(i);
						 return;
					 }
				 }
			 }
		}

		//메세지 전송
		if(obj.size() == 4) {
			for (int i = 0; i < sessionList.get(roomId).size(); i++) {
				sessionList.get(roomId).get(i).getWsSession().sendMessage(new TextMessage(msg));
			}
		}
	}

	@Override  //접속이 끊어진후
	public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
		list.remove(session);
	}

}
