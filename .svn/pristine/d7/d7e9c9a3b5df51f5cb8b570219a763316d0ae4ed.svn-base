package kr.or.ddit.controller.subwork.service;

import java.lang.reflect.Member;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.springframework.stereotype.Controller;

import kr.common.CommonDao;
import kr.or.ddit.mapper.SubWorkMapper;
import kr.or.ddit.vo.MemberVO;
import kr.or.ddit.vo.ProjectLogVO;
import kr.or.ddit.vo.ProjectVO;
import kr.or.ddit.vo.SubWorkComentVO;
import kr.or.ddit.vo.SubWorkVO;
import kr.or.ddit.vo.TopWorkComentVO;
import kr.or.ddit.vo.TopWorkRelationVO;
import kr.or.ddit.vo.TopWorkVO;
import lombok.extern.slf4j.Slf4j;
@Slf4j
@Controller
public class SubWorkServiceImpl implements ISubWorkService {
    @Inject
    private SubWorkMapper mapper;
    @Inject
    private CommonDao dao;
    
    @Override
    public String subWorkInsert(SubWorkVO subWorkVO) throws Exception {
        mapper.subWorkInsert(subWorkVO);
        
        return subWorkVO.getSubWorkNo();
    }

    @Override
    public List<SubWorkVO> subWorkList(TopWorkVO topWorkVO) throws Exception {
        return mapper.subWorkList(topWorkVO);
    }

    @Override
    public SubWorkVO subWorkDetail(SubWorkVO vo) throws Exception {
        return dao.select("subWorkDetail", vo);
    }

    @Override
    public MemberVO selectSubWorkMember(SubWorkVO vo) throws Exception {
        return dao.select("selectSubWorkMember", vo);
    }

    @Override
    public MemberVO selectMemberListSubWork(SubWorkVO vo) throws Exception {
        return dao.select("selectMemberListSubWork", vo);
    }

    @Override
    public void subWorkUpdate_K(SubWorkVO subWorkVO) throws Exception {
        //진행률이 변경되었을 때 로그 기록하기
        Map<String, String> map = dao.select("selectOriginProgressSubWork", subWorkVO.getSubWorkNo());
        log.debug("서브워크 로그용 맵 : {}", map);
        String originProgress = map.get("SUBWORK_PROGRESS");
        String newProgress = subWorkVO.getSubWorkProgress();
        
        if (!originProgress.equals(newProgress)) {
            String proLogContent = "작업 진행률이 " + newProgress + "%로 변경되었습니다.";
            ProjectLogVO proLogVO = new ProjectLogVO();
            proLogVO.setProNo(map.get("PRO_NO"));
            proLogVO.setTopWorkNo(subWorkVO.getTopWorkNo());
            proLogVO.setSubWorkNo(subWorkVO.getSubWorkNo());
            proLogVO.setProLogContent(proLogContent);
            proLogVO.setProLogProgressOrigin(originProgress);
            proLogVO.setProLogProgressNew(newProgress);
            
            log.debug("인서트할 서브워크의 로그 : {}", proLogVO);
            dao.insert("subWorkProgressLogInsert", proLogVO);
        }
        
        
        dao.update("subWorkUpdate_K", subWorkVO);
    }

    @Override
    public List<ProjectLogVO> subWorkLogList(SubWorkVO subWorkVO) throws Exception {
        return dao.selectList("subWorkLogList", subWorkVO);
    }

    @Override
    public List<SubWorkComentVO> subWorkComentList(SubWorkVO subWorkVO) throws Exception {
        return dao.selectList("subWorkComentList", subWorkVO);
    }

    @Override
    public String subWorkComentInsert(SubWorkComentVO swComentVO) throws Exception {
        dao.insert("subWorkComentInsert", swComentVO);
        
        return swComentVO.getSwComentNo();
    }

    @Override
    public void subWorkComentDelete(SubWorkComentVO swComentVO) throws Exception {
        dao.update("subWorkComentDelete", swComentVO);
    }

    @Override
    public void subWorkComentUpdate(SubWorkComentVO swComentVO) throws Exception {
        dao.update("subWorkComentUpdate", swComentVO);
    }

    @Override
    public List<SubWorkVO> selectAllSubWork(ProjectVO projectVO) throws Exception {
        return dao.selectList("selectAllSubWork", projectVO);
    }

    @Override
    public void subWorkDelete(SubWorkVO vo) throws Exception {
        dao.update("subWorkDelete", vo);
    }

    @Override
    public List<SubWorkVO> getChangeSubWork(HashMap<String, Object> map) throws Exception {
        String topWorkNo = (String) map.get("topWorkNo");
        log.debug("하위작업 검색할 topWorkNo : {}", topWorkNo);
        
        return dao.selectList("getChangeSubWork", topWorkNo);
    }

    @Override
    public Map<String, String> setChangeSubWork(HashMap<String, Object> map) throws Exception {
        List<Object> workerArray = (List<Object>) map.get("workerArray");
        String newWorker = (String) map.get("newWorker");
        String topWorkNo = (String) map.get("topWorkNo");
        String subWorkNo = (String) map.get("subWorkNo");
        
        log.debug("workerArray : {}, 타입 : {}", workerArray, workerArray.get(0).getClass().getName());
        
        //1. 기존 관계번호 삭제
        dao.delete("deleteTopWorkRelation", topWorkNo);
        
        //2. 신규 관계번호 인서트
        //그러기위해선 vo를 만들고 멤버아이디와 상위작업번호 넣어야함
        List<TopWorkRelationVO> twRelationList = new ArrayList<>();
        
        for (Object memberId : workerArray) {
            TopWorkRelationVO vo = new TopWorkRelationVO();
            vo.setMemberId((String) memberId);
            vo.setTopWorkNo(topWorkNo);
            twRelationList.add(vo);
        }
        //해시맵에서 subwork 빼내기 
        //현재 방식으론 무조건 vo는 하나만 옴
        Map<String, String> updateMap = new HashMap<String, String>();
        updateMap.put("subWorkNo", subWorkNo);
        updateMap.put("memberId", newWorker); //여기서 memberId가 subwork-container로 와버리면 밑에 조건문이 절대 만족안함.
        log.debug("업데이트할 updateMap : {}", updateMap);
        
        for (TopWorkRelationVO twRelationVO : twRelationList) {
            dao.insert("insertRelation", twRelationVO);
            //인서트 완료했으면 그 번호를 받아서 하위작업에 업데이트.
            String topWorkRNo = twRelationVO.getTopWorkRNo();
            log.debug("새로생긴 관계번호 : {}", topWorkRNo);
            
            //지금 뭔가 에러가 있다.
            //관계vo의 아이디와 updateMap의 아이디가 같으면 업데이트
            if (twRelationVO.getMemberId().equals(updateMap.get("memberId"))) {
                SubWorkVO subWorkVO = new SubWorkVO();
                subWorkVO.setSubWorkNo(updateMap.get("subWorkNo"));
                subWorkVO.setTopWorkRNo(topWorkRNo);
                
                log.debug("새롭게 관계 업데이트할 정보 : {}", subWorkVO);
                dao.update("updateSubWorkRelation", subWorkVO);
            }
            
        }
        
        return null;
    }

}
